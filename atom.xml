<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>安然不哭</title>
  
  <subtitle>西坝阿超个人博客</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://xibaachao.github.io/"/>
  <updated>2020-09-08T04:21:12.439Z</updated>
  <id>https://xibaachao.github.io/</id>
  
  <author>
    <name>西坝阿超</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>c# 单例模式</title>
    <link href="https://xibaachao.github.io/2020/09/08/c#%20%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
    <id>https://xibaachao.github.io/2020/09/08/c#%20%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</id>
    <published>2020-09-08T04:06:31.447Z</published>
    <updated>2020-09-08T04:21:12.439Z</updated>
    
    <content type="html"><![CDATA[<p>C#单例模式的实现和性能对比</p><a id="more"></a><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>单例指的是只能存在一个实例的类（在C#中，更准确的说法是在每个AppDomain之中只能存在一个实例的类，它是软件工程中使用最多的几种模式之一。在第一个使用者创建了这个类的实例之后，其后需要使用这个类的就只能使用之前创建的实例，无法再创建一个新的实例。通常情况下，单例会在第一次被使用时创建。本文会对C#中几种单例的实现方式进行介绍，并分析它们之间的线程安全性和性能差异。</p><p>单例的实现方式有很多种，但从最简单的实现（非延迟加载，非线程安全，效率低下），到可延迟加载，线程安全，且高效的实现，它们都有一些基本的共同点：</p><blockquote><ul><li><p>单例类都只有一个private的无参构造函数</p></li><li><p>类声明为sealed（不是必须的）</p></li><li><p>类中有一个静态变量保存着所创建的实例的引用</p></li><li><p>单例类会提供一个静态方法或属性来返回创建的实例的引用（eg.GetInstance）</p></li></ul></blockquote><h3 id="一-非线程安全"><a href="#一-非线程安全" class="headerlink" title="一. 非线程安全"></a>一. 非线程安全</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;Bad code! Do not use!</span><br><span class="line">public sealed class Singleton</span><br><span class="line">&#123;</span><br><span class="line">    private static Singleton instance &#x3D; null;</span><br><span class="line"></span><br><span class="line">    private Singleton()</span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static Singleton instance</span><br><span class="line">    &#123;</span><br><span class="line">        get</span><br><span class="line">        &#123;</span><br><span class="line">            if (instance &#x3D;&#x3D; null)</span><br><span class="line">            &#123;</span><br><span class="line">                instance &#x3D; new Singleton();</span><br><span class="line">            &#125;</span><br><span class="line">            return instance;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>这种方法不是线程安全的，会存在两个线程同时执行if (instance == null)并且创建两个不同的instance，后创建的会替换掉新创建的，导致之前拿到的reference为空。</p></blockquote><h3 id="二-简单的线程安全实现"><a href="#二-简单的线程安全实现" class="headerlink" title="二. 简单的线程安全实现"></a>二. 简单的线程安全实现</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">public sealed class Singleton</span><br><span class="line">&#123;</span><br><span class="line">    private static Singleton instance &#x3D; null;</span><br><span class="line">    private static readonly object padlock &#x3D; new object();</span><br><span class="line"></span><br><span class="line">    Singleton()</span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static Singleton Instance</span><br><span class="line">    &#123;</span><br><span class="line">        get</span><br><span class="line">        &#123;</span><br><span class="line">            lock (padlock)</span><br><span class="line">            &#123;</span><br><span class="line">                if (instance &#x3D;&#x3D; null)</span><br><span class="line">                &#123;</span><br><span class="line">                    instance &#x3D; new Singleton();</span><br><span class="line">                &#125;</span><br><span class="line">                return instance;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>相比较于实现一，这个版本加上了一个对instance的锁，在调用instance之前要先对padlock上锁，这样就避免了实现一中的线程冲突，该实现自始至终只会创建一个instance了。但是，由于每次调用Instance都会使用到锁，而调用锁的开销较大，这个实现会有一定的性能损失。</p><p>注意这里我们使用的是新建一个private的object实例padlock来实现锁操作，而不是直接对Singleton进行上锁。直接对类型上锁会出现潜在的风险，因为这个类型是public的，所以理论上它会在任何code里调用，直接对它上锁会导致性能问题，甚至会出现死锁情况。</p><p>Note: C#中，同一个线程是可以对一个object进行多次上锁的，但是不同线程之间如果同时上锁，就可能会出现线程等待，或者严重的会出现死锁情况。因此，我们在使用lock时，尽量选择类中的私有变量上锁，这样可以避免上述情况发生。</p></blockquote><h3 id="三-双重验证的线程安全实现"><a href="#三-双重验证的线程安全实现" class="headerlink" title="三. 双重验证的线程安全实现"></a>三. 双重验证的线程安全实现</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">public sealed calss Singleton</span><br><span class="line">&#123;</span><br><span class="line">    private static Singleton instance &#x3D; null;</span><br><span class="line">    private static readonly object padlock &#x3D; new object();</span><br><span class="line"></span><br><span class="line">    Singleton()</span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static Singleton Instance</span><br><span class="line">    &#123;</span><br><span class="line">        get</span><br><span class="line">        &#123;</span><br><span class="line">            if (instance &#x3D;&#x3D; null)</span><br><span class="line">            &#123;</span><br><span class="line">                lock (padlock)</span><br><span class="line">                &#123;</span><br><span class="line">                    if (instance &#x3D;&#x3D; null)</span><br><span class="line">                    &#123;</span><br><span class="line">                        instance &#x3D; new Singleton();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            return instance;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>在保证线程安全的同时，这个实现还避免了每次调用Instance都进行lock操作，这会节约一定的时间。</p></blockquote><h3 id="四-不用锁的线程安全实现"><a href="#四-不用锁的线程安全实现" class="headerlink" title="四. 不用锁的线程安全实现"></a>四. 不用锁的线程安全实现</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">public sealed class Singleton</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F;在Singleton第一次被调用时会执行instance的初始化</span><br><span class="line">    private static readonly Singleton instance &#x3D; new Singleton();</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;Explicit static consturctor to tell C# compiler </span><br><span class="line">    &#x2F;&#x2F;not to mark type as beforefieldinit</span><br><span class="line">    static Singleton()</span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private Singleton()</span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static Singleton Instance</span><br><span class="line">    &#123;</span><br><span class="line">        get</span><br><span class="line">        &#123;</span><br><span class="line">            return instance;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>这个实现很简单，并没有用到锁，但是它仍然是线程安全的。这里使用了一个static，readonly的Singleton实例，它会在Singleton第一次被调用的时候新建一个instance，这里新建时候的线程安全保障是由.NET直接控制的，我们可以认为它是一个原子操作，并且在一个AppDomaing中它只会被创建一次。</p><p>这种实现也有一些缺点:</p><ol><li><p>instance被创建的时机不明，任何对Singleton的调用都会提前创建instance</p></li><li><p>static构造函数的循环调用。如有A，B两个类，A的静态构造函数中调用了B，而B的静态构造函数中又调用了A，这两个就会形成一个循环调用，严重的会导致程序崩溃。</p></li><li><p>我们需要手动添加Singleton的静态构造函数来确保Singleton类型不会被自动加上beforefieldinit这个Attribute，以此来确保instance会在第一次调用Singleton时才被创建。</p></li><li><p>readonly的属性无法在运行时改变，如果我们需要在程序运行时dispose这个instance再重新创建一个新的instance，这种实现方法就无法满足。</p></li></ol></blockquote><h3 id="五-完全延迟加载实现（fully-lazy-instantiation）"><a href="#五-完全延迟加载实现（fully-lazy-instantiation）" class="headerlink" title="五. 完全延迟加载实现（fully lazy instantiation）"></a>五. 完全延迟加载实现（fully lazy instantiation）</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">public sealed class Singleton</span><br><span class="line">&#123;</span><br><span class="line">    private Singleton()</span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static Singleton Instance </span><br><span class="line">    &#123;</span><br><span class="line">        get</span><br><span class="line">        &#123;</span><br><span class="line">            return Nested.instance;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private class Nested</span><br><span class="line">    &#123;</span><br><span class="line">        &#x2F;&#x2F; Explicit static constructor to tell C# compiler</span><br><span class="line">        &#x2F;&#x2F; not to mark type as beforefieldinit</span><br><span class="line">        static Nested()</span><br><span class="line">        &#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        internal static readonly Singleton instance &#x3D; new Singleton();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>实现五是实现四的包装。它确保了instance只会在Instance的get方法里面调用，且只会在第一次调用前初始化。它是实现四的确保延迟加载的版本。 </p></blockquote><h3 id="六-使用-NET4的Lazy类型"><a href="#六-使用-NET4的Lazy类型" class="headerlink" title="六 使用.NET4的Lazy类型"></a>六 使用.NET4的Lazy<T>类型</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">public sealed class Singleton</span><br><span class="line">&#123;</span><br><span class="line">    private static readonly Lazy&lt;Singleton&gt; lazy &#x3D; new Lazy&lt;Singleton&gt;(() &#x3D;&gt; new Singleton());</span><br><span class="line"></span><br><span class="line">    public static Singleton Instance </span><br><span class="line">    &#123;</span><br><span class="line">        get </span><br><span class="line">        &#123;</span><br><span class="line">            return lazy.Value;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private Singleton()</span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>.NET4或以上的版本支持Lazy<T>来实现延迟加载，它用最简洁的代码保证了单例的线程安全和延迟加载特性。</p></blockquote><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>总体来说，上面说的多种单例实现方式在现今的计算机性能下差距都不大，除非你需要特别大并发量的调用instance，才会需要去考虑锁的性能问题。</p><p>对于一般的开发者来说，使用方法二或者方法六来实现单例已经是足够好的了，方法四和五则需要对C#运行流程有一个较好的认识，并且实现时需要掌握一定技巧，并且他们节省的时间仍然是有限的。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;C#单例模式的实现和性能对比&lt;/p&gt;
    
    </summary>
    
    
      <category term="编程开发" scheme="https://xibaachao.github.io/categories/%E7%BC%96%E7%A8%8B%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="C#" scheme="https://xibaachao.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>c# 接口请求</title>
    <link href="https://xibaachao.github.io/2020/09/08/c#%20%E6%8E%A5%E5%8F%A3%E8%AF%B7%E6%B1%82/"/>
    <id>https://xibaachao.github.io/2020/09/08/c#%20%E6%8E%A5%E5%8F%A3%E8%AF%B7%E6%B1%82/</id>
    <published>2020-09-08T03:10:47.526Z</published>
    <updated>2020-09-08T03:29:38.456Z</updated>
    
    <content type="html"><![CDATA[<p>C# Http请求接口数据</p><a id="more"></a><h3 id="get"><a href="#get" class="headerlink" title="get"></a>get</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">using (var httpClient &#x3D; new HttpClient ()) &#123;</span><br><span class="line">    &#x2F;&#x2F;get</span><br><span class="line">    var url &#x3D; new Uri (&quot;接口网络地址&quot;);</span><br><span class="line">    &#x2F;&#x2F; response</span><br><span class="line">    var response &#x3D; httpClient.GetAsync (url).Result;</span><br><span class="line">    var data &#x3D; response.Content.ReadAsStringAsync ().Result;</span><br><span class="line">    return data; &#x2F;&#x2F;接口调用成功获取的数据</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="post"><a href="#post" class="headerlink" title="post"></a>post</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">using (var httpClient &#x3D; new HttpClient ()) &#123;</span><br><span class="line">    &#x2F;&#x2F;post</span><br><span class="line">    var url &#x3D; new Uri (&quot;接口网络地址&quot;);</span><br><span class="line">    var body &#x3D; new FormUrlEncodedContent (new Dictionary&lt;string, string&gt; &#123; &#123; &quot;参数1&quot;, &quot;值1&quot; &#125;,</span><br><span class="line">        &#123; &quot;参数2&quot;, &quot;值2&quot; &#125;,</span><br><span class="line">        &#123; &quot;参数3&quot;, &quot;值3&quot; &#125;,</span><br><span class="line">        &#123; &quot;参数4&quot;, &quot;值4&quot; &#125;,</span><br><span class="line">    &#125;);</span><br><span class="line">    &#x2F;&#x2F; response</span><br><span class="line">    var response &#x3D; httpClient.PostAsync (url, body).Result;</span><br><span class="line">    var data &#x3D; response.Content.ReadAsStringAsync ().Result;</span><br><span class="line">    return data; &#x2F;&#x2F;接口调用成功数据</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="设置header"><a href="#设置header" class="headerlink" title="设置header"></a>设置header</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">httpClient.DefaultRequestHeaders.Add(&quot;Accept&quot;, &quot;application&#x2F;json&quot;);&#x2F;&#x2F;设置请求头</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;C# Http请求接口数据&lt;/p&gt;
    
    </summary>
    
    
      <category term="编程开发" scheme="https://xibaachao.github.io/categories/%E7%BC%96%E7%A8%8B%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="C#" scheme="https://xibaachao.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>PHP获取某目录下所有文件以及子目录文件</title>
    <link href="https://xibaachao.github.io/2020/09/03/PHP%E8%8E%B7%E5%8F%96%E6%9F%90%E7%9B%AE%E5%BD%95%E4%B8%8B%E6%89%80%E6%9C%89%E6%96%87%E4%BB%B6%E4%BB%A5%E5%8F%8A%E5%AD%90%E7%9B%AE%E5%BD%95%E6%96%87%E4%BB%B6/"/>
    <id>https://xibaachao.github.io/2020/09/03/PHP%E8%8E%B7%E5%8F%96%E6%9F%90%E7%9B%AE%E5%BD%95%E4%B8%8B%E6%89%80%E6%9C%89%E6%96%87%E4%BB%B6%E4%BB%A5%E5%8F%8A%E5%AD%90%E7%9B%AE%E5%BD%95%E6%96%87%E4%BB%B6/</id>
    <published>2020-09-03T03:20:17.447Z</published>
    <updated>2020-09-03T03:23:10.896Z</updated>
    
    <content type="html"><![CDATA[<p>PHP获取某目录下所有文件以及子目录文件</p><a id="more"></a><h3 id="获取目录下文件，不包括子目录"><a href="#获取目录下文件，不包括子目录" class="headerlink" title="获取目录下文件，不包括子目录"></a>获取目录下文件，不包括子目录</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//获取某目录下所有文件、目录名（不包括子目录下文件、目录名）</span></span><br><span class="line">$handler = opendir($dir);</span><br><span class="line"><span class="keyword">while</span> (($filename = readdir($handler)) !== <span class="keyword">false</span>) &#123;<span class="comment">//务必使用!==，防止目录下出现类似文件名“0”等情况</span></span><br><span class="line">        <span class="keyword">if</span> ($filename != <span class="string">"."</span> &amp;&amp; $filename != <span class="string">".."</span>) &#123;</span><br><span class="line">                $files[] = $filename ;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    closedir($handler);</span><br><span class="line">     </span><br><span class="line"><span class="comment">//打印所有文件名</span></span><br><span class="line"><span class="keyword">foreach</span> ($files <span class="keyword">as</span> $value) &#123;</span><br><span class="line">    <span class="keyword">echo</span> $value.<span class="string">"&lt;br /&gt;"</span>;</span><br></pre></td></tr></table></figure><h3 id="获取目录下所有文件，包括子目录"><a href="#获取目录下所有文件，包括子目录" class="headerlink" title="获取目录下所有文件，包括子目录"></a>获取目录下所有文件，包括子目录</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">get_allfiles</span><span class="params">($path,&amp;$files)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(is_dir($path))&#123;</span><br><span class="line">        $dp = dir($path);</span><br><span class="line">        <span class="keyword">while</span> ($file = $dp -&gt;read())&#123;</span><br><span class="line">            <span class="keyword">if</span>($file !=<span class="string">"."</span> &amp;&amp; $file !=<span class="string">".."</span>)&#123;</span><br><span class="line">                get_allfiles($path.<span class="string">"/"</span>.$file, $files);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        $dp -&gt;close();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(is_file($path))&#123;</span><br><span class="line">        $files[] =  $path;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">   </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">get_filenamesbydir</span><span class="params">($dir)</span></span>&#123;</span><br><span class="line">    $files =  <span class="keyword">array</span>();</span><br><span class="line">    get_allfiles($dir,$files);</span><br><span class="line">    <span class="keyword">return</span> $files;</span><br><span class="line">&#125;</span><br><span class="line">   </span><br><span class="line">$filenames = get_filenamesbydir(<span class="string">"static/image/"</span>);</span><br><span class="line"><span class="comment">//打印所有文件名，包括路径</span></span><br><span class="line"><span class="keyword">foreach</span> ($filenames <span class="keyword">as</span> $value) &#123;</span><br><span class="line">    <span class="keyword">echo</span> $value.<span class="string">"&lt;br /&gt;"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;PHP获取某目录下所有文件以及子目录文件&lt;/p&gt;
    
    </summary>
    
    
      <category term="编程开发" scheme="https://xibaachao.github.io/categories/%E7%BC%96%E7%A8%8B%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="PHP" scheme="https://xibaachao.github.io/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>DotNetBar控件窗体风格使用</title>
    <link href="https://xibaachao.github.io/2020/09/02/DotNetBar%E6%8E%A7%E4%BB%B6%E7%AA%97%E4%BD%93%E9%A3%8E%E6%A0%BC%E4%BD%BF%E7%94%A8/"/>
    <id>https://xibaachao.github.io/2020/09/02/DotNetBar%E6%8E%A7%E4%BB%B6%E7%AA%97%E4%BD%93%E9%A3%8E%E6%A0%BC%E4%BD%BF%E7%94%A8/</id>
    <published>2020-09-02T08:01:31.126Z</published>
    <updated>2020-09-02T08:19:10.929Z</updated>
    
    <content type="html"><![CDATA[<p>DotNetBar 界面继承 风格应用</p><a id="more"></a><ul><li>引入DevComponents.DotNetBar2</li><li>窗体继承OfficeForm</li><li>窗体拖入styleManager1控件（可以选择应用的风格）</li><li>窗体构造方法<code>this.EnableGlass = false;</code></li></ul><p><img src="http://imgs.0305.ink/blog_1.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;DotNetBar 界面继承 风格应用&lt;/p&gt;
    
    </summary>
    
    
      <category term="编程开发" scheme="https://xibaachao.github.io/categories/%E7%BC%96%E7%A8%8B%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="C#" scheme="https://xibaachao.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>github博客自定义域名</title>
    <link href="https://xibaachao.github.io/2020/09/02/github%E5%8D%9A%E5%AE%A2%E8%87%AA%E5%AE%9A%E4%B9%89%E5%9F%9F%E5%90%8D/"/>
    <id>https://xibaachao.github.io/2020/09/02/github%E5%8D%9A%E5%AE%A2%E8%87%AA%E5%AE%9A%E4%B9%89%E5%9F%9F%E5%90%8D/</id>
    <published>2020-09-02T01:52:59.973Z</published>
    <updated>2020-09-02T02:00:30.952Z</updated>
    
    <content type="html"><![CDATA[<p>github 太良心了！如何使用github博客自定义域名</p><a id="more"></a><p>1、先建立一个博客，具体操作可以在我的博客里面搜索hexo 使用</p><p>2、在建立的博客如xibaachao.github.io的mast 分支下的根目录建立一个CNAME文件里面写上你需要绑定的域名比如blog.achao.cc</p><p>3、将域名做一个cname处理，指向你的博客域名，比如，将blog.achao.cc 指向xibaachao.github.io</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;github 太良心了！如何使用github博客自定义域名&lt;/p&gt;
    
    </summary>
    
    
      <category term="软件推荐" scheme="https://xibaachao.github.io/categories/%E8%BD%AF%E4%BB%B6%E6%8E%A8%E8%8D%90/"/>
    
    
      <category term="软件使用" scheme="https://xibaachao.github.io/tags/%E8%BD%AF%E4%BB%B6%E4%BD%BF%E7%94%A8/"/>
    
  </entry>
  
  <entry>
    <title>LibreOffice转pdf</title>
    <link href="https://xibaachao.github.io/2020/09/01/LibreOffice%E8%BD%ACpdf/"/>
    <id>https://xibaachao.github.io/2020/09/01/LibreOffice%E8%BD%ACpdf/</id>
    <published>2020-09-01T08:07:04.583Z</published>
    <updated>2020-09-01T08:14:38.148Z</updated>
    
    <content type="html"><![CDATA[<p>word 转pdf  LibreOffice 转pdf</p><a id="more"></a><h3 id="1、安装环境"><a href="#1、安装环境" class="headerlink" title="1、安装环境"></a>1、安装环境</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum install libreoffice</span><br><span class="line">yum install libreoffice-headless</span><br></pre></td></tr></table></figure><h3 id="2、执行转换命令"><a href="#2、执行转换命令" class="headerlink" title="2、执行转换命令"></a>2、执行转换命令</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">soffice --headless --convert-to pdf &#123;文档路径&#125; --outdir &#123;导出目录路径&#125;</span><br></pre></td></tr></table></figure><p>注意：如果中文会出现乱码问题，这个时候需要把Windows下的字体C:\Windows\Fonts下的常用字体，即simsun.ttc等复制到usr/share/fonts目录下。</p><h3 id="3、在程序中执行命令"><a href="#3、在程序中执行命令" class="headerlink" title="3、在程序中执行命令"></a>3、在程序中执行命令</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$retval = <span class="number">1</span>;</span><br><span class="line"><span class="comment">// exec() might be disabled</span></span><br><span class="line">$cmd = <span class="string">'export HOME=/tmp/ &amp;&amp; /usr/bin/libreoffice --headless --convert-to pdf 1.doc --outdir ./'</span>;</span><br><span class="line"><span class="keyword">if</span> (function_exists(<span class="string">'exec'</span>))&#123;</span><br><span class="line">    @exec($cmd, $output, $retval);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Did it work?</span></span><br><span class="line"><span class="keyword">if</span> ($retval &gt; <span class="number">0</span>)&#123;</span><br><span class="line">    <span class="keyword">exit</span>(<span class="string">'process_failed'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">'success'</span>;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;word 转pdf  LibreOffice 转pdf&lt;/p&gt;
    
    </summary>
    
    
      <category term="编程开发" scheme="https://xibaachao.github.io/categories/%E7%BC%96%E7%A8%8B%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="PHP" scheme="https://xibaachao.github.io/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>PHP删除文件夹及文件夹下的所有文件</title>
    <link href="https://xibaachao.github.io/2020/09/01/PHP%E5%88%A0%E9%99%A4%E6%96%87%E4%BB%B6%E5%A4%B9%E5%8F%8A%E6%96%87%E4%BB%B6%E5%A4%B9%E4%B8%8B%E7%9A%84%E6%89%80%E6%9C%89%E6%96%87%E4%BB%B6/"/>
    <id>https://xibaachao.github.io/2020/09/01/PHP%E5%88%A0%E9%99%A4%E6%96%87%E4%BB%B6%E5%A4%B9%E5%8F%8A%E6%96%87%E4%BB%B6%E5%A4%B9%E4%B8%8B%E7%9A%84%E6%89%80%E6%9C%89%E6%96%87%E4%BB%B6/</id>
    <published>2020-09-01T07:59:22.414Z</published>
    <updated>2020-09-01T08:08:13.979Z</updated>
    
    <content type="html"><![CDATA[<p>php 删除文件操作</p><a id="more"></a><h3 id="只删除文件夹包含的文件-不删除文件夹"><a href="#只删除文件夹包含的文件-不删除文件夹" class="headerlink" title="只删除文件夹包含的文件,不删除文件夹"></a>只删除文件夹包含的文件,不删除文件夹</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">deldir</span><span class="params">($dir)</span> </span>&#123;</span><br><span class="line"><span class="comment">//先删除目录下的文件：</span></span><br><span class="line">$dh = opendir($dir);</span><br><span class="line"><span class="keyword">while</span> ($file = readdir($dh)) &#123;</span><br><span class="line"><span class="keyword">if</span>($file != <span class="string">"."</span> &amp;&amp; $file!=<span class="string">".."</span>) &#123;</span><br><span class="line">$fullpath = $dir.<span class="string">"/"</span>.$file;</span><br><span class="line"><span class="keyword">if</span>(!is_dir($fullpath)) &#123;</span><br><span class="line">unlink($fullpath);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">deldir($fullpath);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">closedir($dh);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="删除文件夹及文件夹下所有的文件"><a href="#删除文件夹及文件夹下所有的文件" class="headerlink" title="删除文件夹及文件夹下所有的文件"></a>删除文件夹及文件夹下所有的文件</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">deldir</span><span class="params">($dir)</span> </span>&#123;</span><br><span class="line"><span class="comment">//先删除目录下的文件：</span></span><br><span class="line">$dh = opendir($dir);</span><br><span class="line"><span class="keyword">while</span> ($file = readdir($dh)) &#123;</span><br><span class="line"><span class="keyword">if</span>($file != <span class="string">"."</span> &amp;&amp; $file!=<span class="string">".."</span>) &#123;</span><br><span class="line">$fullpath = $dir.<span class="string">"/"</span>.$file;</span><br><span class="line"><span class="keyword">if</span>(!is_dir($fullpath)) &#123;</span><br><span class="line">unlink($fullpath);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">deldir($fullpath);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">closedir($dh);</span><br><span class="line"></span><br><span class="line"><span class="comment">//删除当前文件夹：</span></span><br><span class="line"><span class="keyword">if</span>(rmdir($dir)) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="创建文件夹并指定权限和编码"><a href="#创建文件夹并指定权限和编码" class="headerlink" title="创建文件夹并指定权限和编码"></a>创建文件夹并指定权限和编码</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (!is_dir($dir))&#123;                                 <span class="comment">//如果目录不存在</span></span><br><span class="line">mkdir(iconv(<span class="string">"UTF-8"</span>, <span class="string">"GBK"</span>, $dir),<span class="number">0777</span>,<span class="keyword">true</span>);   <span class="comment">//创建目录,777权限,GBK编码格式</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;php 删除文件操作&lt;/p&gt;
    
    </summary>
    
    
      <category term="编程开发" scheme="https://xibaachao.github.io/categories/%E7%BC%96%E7%A8%8B%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="PHP" scheme="https://xibaachao.github.io/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>mysql生成数据库字典</title>
    <link href="https://xibaachao.github.io/2020/09/01/mysql%E7%94%9F%E6%88%90%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%97%E5%85%B8/"/>
    <id>https://xibaachao.github.io/2020/09/01/mysql%E7%94%9F%E6%88%90%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%97%E5%85%B8/</id>
    <published>2020-09-01T07:50:05.581Z</published>
    <updated>2020-09-01T07:50:58.703Z</updated>
    
    <content type="html"><![CDATA[<p>mysql 生成数据库字典 sql语句</p><a id="more"></a><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    t.TABLE_SCHEMA <span class="keyword">AS</span> 库名,</span><br><span class="line">    t.TABLE_NAME <span class="keyword">AS</span> 表名,</span><br><span class="line">    t.COLUMN_NAME <span class="keyword">AS</span> 字段名,</span><br><span class="line">    t.COLUMN_TYPE <span class="keyword">AS</span> 数据类型,</span><br><span class="line">    <span class="keyword">CASE</span> <span class="keyword">IFNULL</span>(t.COLUMN_DEFAULT,<span class="string">'Null'</span>) </span><br><span class="line">        <span class="keyword">WHEN</span> <span class="string">''</span> <span class="keyword">THEN</span> <span class="string">'空字符串'</span> </span><br><span class="line">        <span class="keyword">WHEN</span> <span class="string">'Null'</span> <span class="keyword">THEN</span> <span class="string">'NULL'</span> </span><br><span class="line">        <span class="keyword">ELSE</span> t.COLUMN_DEFAULT <span class="keyword">END</span>  <span class="keyword">AS</span> 默认值,</span><br><span class="line">    <span class="keyword">CASE</span> t.IS_NULLABLE <span class="keyword">WHEN</span> <span class="string">'YES'</span> <span class="keyword">THEN</span> <span class="string">'是'</span> <span class="keyword">ELSE</span> <span class="string">'否'</span> <span class="keyword">END</span> <span class="keyword">AS</span> 是否允许为空,</span><br><span class="line">    t.COLUMN_COMMENT <span class="keyword">AS</span> 字段说明</span><br><span class="line"><span class="keyword">FROM</span> information_schema.COLUMNS t </span><br><span class="line"><span class="keyword">WHERE</span> t.TABLE_SCHEMA=<span class="string">'数据库名'</span> <span class="keyword">AND</span> t.TABLE_NAME=<span class="string">'表名'</span>;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;mysql 生成数据库字典 sql语句&lt;/p&gt;
    
    </summary>
    
    
      <category term="编程开发" scheme="https://xibaachao.github.io/categories/%E7%BC%96%E7%A8%8B%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="Mysql" scheme="https://xibaachao.github.io/tags/Mysql/"/>
    
  </entry>
  
  <entry>
    <title>go使用中国源</title>
    <link href="https://xibaachao.github.io/2020/09/01/go%E4%BD%BF%E7%94%A8%E4%B8%AD%E5%9B%BD%E6%BA%90/"/>
    <id>https://xibaachao.github.io/2020/09/01/go%E4%BD%BF%E7%94%A8%E4%B8%AD%E5%9B%BD%E6%BA%90/</id>
    <published>2020-09-01T06:56:37.646Z</published>
    <updated>2020-09-01T07:01:35.246Z</updated>
    
    <content type="html"><![CDATA[<p>go 使用中国源 </p><a id="more"></a><h3 id="配置环境："><a href="#配置环境：" class="headerlink" title="配置环境："></a>配置环境：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">go env -w GO111MODULE=on</span><br><span class="line">启用 Go Modules 功能</span><br><span class="line">go env -w  GOPROXY=https://goproxy.cn,direct </span><br><span class="line">七牛 CDN</span><br><span class="line">go env -w GOPROXY=https://mirrors.aliyun.com/goproxy/,direct</span><br><span class="line">阿里 CDN</span><br><span class="line">go env -w  GOPROXY=https://goproxy.io,direct</span><br><span class="line">官方 CDN</span><br></pre></td></tr></table></figure><h3 id="注意！"><a href="#注意！" class="headerlink" title="注意！"></a>注意！</h3><p>开启go modules 后</p><p>需要在项目中使用 <code>go mod init</code> 初始化不然要报错！！！！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;go 使用中国源 &lt;/p&gt;
    
    </summary>
    
    
      <category term="编程开发" scheme="https://xibaachao.github.io/categories/%E7%BC%96%E7%A8%8B%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="GO" scheme="https://xibaachao.github.io/tags/GO/"/>
    
  </entry>
  
  <entry>
    <title>ifarme F5 刷新</title>
    <link href="https://xibaachao.github.io/2020/08/28/ifarme%20F5%20%E5%88%B7%E6%96%B0/"/>
    <id>https://xibaachao.github.io/2020/08/28/ifarme%20F5%20%E5%88%B7%E6%96%B0/</id>
    <published>2020-08-28T07:28:19.629Z</published>
    <updated>2020-08-28T07:30:44.478Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"body"</span>).bind(<span class="string">"keydown"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(event.keyCode == <span class="number">116</span>) &#123;</span><br><span class="line">event.preventDefault();<span class="comment">//阻止默认刷新</span></span><br><span class="line">$(<span class="string">"#main_frame"</span>).attr(<span class="string">"src"</span>,<span class="built_in">window</span>.frames[<span class="string">"main_frame"</span>].src);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"body"</span>).bind(<span class="string">"keydown"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(event.keyCode == <span class="number">116</span>) &#123;</span><br><span class="line">event.preventDefault();<span class="comment">//阻止默认刷新</span></span><br><span class="line">$(<span class="string">"#main_frame"</span>).attr(<span class="string">"src"</span>,<span class="built_in">window</span>.frames[<span class="string">"main_frame"</span>].src);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重点就是这个<code>event.preventDefault();//阻止默认刷新</code></p><p>其他你可以随意操作了</p>]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$(&lt;span class=&quot;string&quot;&gt;&quot;body&quot;&lt;/span&gt;).bind(&lt;span class=&quot;string&quot;&gt;&quot;keydown&quot;&lt;/span&gt;,&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;event&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(event.keyCode == &lt;span class=&quot;number&quot;&gt;116&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;event.preventDefault();&lt;span class=&quot;comment&quot;&gt;//阻止默认刷新&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$(&lt;span class=&quot;string&quot;&gt;&quot;#main_frame&quot;&lt;/span&gt;).attr(&lt;span class=&quot;string&quot;&gt;&quot;src&quot;&lt;/span&gt;,&lt;span class=&quot;built_in&quot;&gt;window&lt;/span&gt;.frames[&lt;span class=&quot;string&quot;&gt;&quot;main_frame&quot;&lt;/span&gt;].src);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="编程开发" scheme="https://xibaachao.github.io/categories/%E7%BC%96%E7%A8%8B%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="前端开发" scheme="https://xibaachao.github.io/tags/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>Laravel分页视图带参数</title>
    <link href="https://xibaachao.github.io/2020/08/28/Laravel%E5%88%86%E9%A1%B5%E8%A7%86%E5%9B%BE%E5%B8%A6%E5%8F%82%E6%95%B0/"/>
    <id>https://xibaachao.github.io/2020/08/28/Laravel%E5%88%86%E9%A1%B5%E8%A7%86%E5%9B%BE%E5%B8%A6%E5%8F%82%E6%95%B0/</id>
    <published>2020-08-28T03:08:26.064Z</published>
    <updated>2020-08-28T03:14:22.774Z</updated>
    
    <content type="html"><![CDATA[<p>Laravel分页视图带参数</p><p>做列表筛选的时候，时常会遇到带参数分页的情况</p><a id="more"></a><p>在是视图中的代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;$list-&gt;appends([<span class="string">'type'</span>=&gt;$type])-&gt;links()&#125;&#125;</span><br></pre></td></tr></table></figure><p>在调用<code>links</code>方法前先调用<code>appends</code>来设置需要的参数</p><p>生成后代码会是：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/xxx?type=xxx&amp;page=1</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Laravel分页视图带参数&lt;/p&gt;
&lt;p&gt;做列表筛选的时候，时常会遇到带参数分页的情况&lt;/p&gt;
    
    </summary>
    
    
      <category term="编程开发" scheme="https://xibaachao.github.io/categories/%E7%BC%96%E7%A8%8B%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="PHP" scheme="https://xibaachao.github.io/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>laravel 自定义分页返回数据</title>
    <link href="https://xibaachao.github.io/2020/08/28/laravel%20%E8%87%AA%E5%AE%9A%E4%B9%89%E5%88%86%E9%A1%B5%E8%BF%94%E5%9B%9E%E6%95%B0%E6%8D%AE/"/>
    <id>https://xibaachao.github.io/2020/08/28/laravel%20%E8%87%AA%E5%AE%9A%E4%B9%89%E5%88%86%E9%A1%B5%E8%BF%94%E5%9B%9E%E6%95%B0%E6%8D%AE/</id>
    <published>2020-08-28T02:56:58.516Z</published>
    <updated>2020-08-28T03:08:04.456Z</updated>
    
    <content type="html"><![CDATA[<p>laravel 自定义分页返回数据</p><p>在给前端返回数据的时候常常会用到分页，但是laravel 本身的分页函数会返回很多额外的数据，所以需要自定义些返回数据</p><a id="more"></a><ul><li>封装方法</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Contracts</span>\<span class="title">Pagination</span>\<span class="title">Paginator</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">page_number</span><span class="params">(Paginator $paginator)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> [</span><br><span class="line">            <span class="string">'total'</span> =&gt; $paginator-&gt;total(),<span class="comment">//总条数</span></span><br><span class="line">            <span class="string">'page_size'</span> =&gt; $paginator-&gt;perPage(),<span class="comment">//每页的数据条数</span></span><br><span class="line">            <span class="string">'current_page'</span> =&gt; $paginator-&gt;currentPage(),<span class="comment">//当前页页码</span></span><br><span class="line">            <span class="string">'last_page'</span> =&gt; $paginator-&gt;lastPage(),<span class="comment">//最后一页的页码</span></span><br><span class="line">            <span class="string">'items'</span>=&gt;$paginator-&gt;items()<span class="comment">//分页后的数据</span></span><br><span class="line">        ];</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li>调用</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$data=DB:table(<span class="string">"xxx"</span>)-&gt;where($where)-&gt;select($columns)-&gt;paginate();</span><br><span class="line"><span class="keyword">return</span> page_number($data);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;laravel 自定义分页返回数据&lt;/p&gt;
&lt;p&gt;在给前端返回数据的时候常常会用到分页，但是laravel 本身的分页函数会返回很多额外的数据，所以需要自定义些返回数据&lt;/p&gt;
    
    </summary>
    
    
      <category term="编程开发" scheme="https://xibaachao.github.io/categories/%E7%BC%96%E7%A8%8B%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="PHP" scheme="https://xibaachao.github.io/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>webpack模块化开发</title>
    <link href="https://xibaachao.github.io/2020/08/27/webpack%E6%A8%A1%E5%9D%97%E5%8C%96%E5%BC%80%E5%8F%91/"/>
    <id>https://xibaachao.github.io/2020/08/27/webpack%E6%A8%A1%E5%9D%97%E5%8C%96%E5%BC%80%E5%8F%91/</id>
    <published>2020-08-27T05:59:32.466Z</published>
    <updated>2020-08-27T06:06:05.010Z</updated>
    
    <content type="html"><![CDATA[<p>webpack 多模块开发 模板使用 公用模板使用</p><a id="more"></a><h3 id="安装html-loader"><a href="#安装html-loader" class="headerlink" title="安装html-loader"></a>安装html-loader</h3><p><code>npm install html-loader</code></p><h3 id="配置html-loader"><a href="#配置html-loader" class="headerlink" title="配置html-loader"></a>配置html-loader</h3><ul><li><p>webpack.config.js</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">module: &#123;</span><br><span class="line">       rules: [&#123;</span><br><span class="line">       test: /\.(tpl)$/,</span><br><span class="line">               use:&#123;</span><br><span class="line">                 loader: 'html-loader',</span><br><span class="line">                 options: &#123;</span><br><span class="line">                   minimize: false</span><br><span class="line">                 &#125;</span><br><span class="line">               &#125;</span><br><span class="line">       &#125;]</span><br></pre></td></tr></table></figure><blockquote><p>注意！这里匹配的是.tpl的格式结尾的模板。</p></blockquote></li></ul><h3 id="页面引入模板"><a href="#页面引入模板" class="headerlink" title="页面引入模板"></a>页面引入模板</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">%=</span> <span class="attr">require</span>('<span class="attr">.</span>/<span class="attr">base</span>/<span class="attr">header.tpl</span>') %&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;webpack 多模块开发 模板使用 公用模板使用&lt;/p&gt;
    
    </summary>
    
    
      <category term="编程开发" scheme="https://xibaachao.github.io/categories/%E7%BC%96%E7%A8%8B%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="前端开发" scheme="https://xibaachao.github.io/tags/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>阿里大于-短信发送-sdk使用-PHP</title>
    <link href="https://xibaachao.github.io/2020/08/17/%E9%98%BF%E9%87%8C%E5%A4%A7%E4%BA%8E-%E7%9F%AD%E4%BF%A1%E5%8F%91%E9%80%81-sdk%E4%BD%BF%E7%94%A8-PHP/"/>
    <id>https://xibaachao.github.io/2020/08/17/%E9%98%BF%E9%87%8C%E5%A4%A7%E4%BA%8E-%E7%9F%AD%E4%BF%A1%E5%8F%91%E9%80%81-sdk%E4%BD%BF%E7%94%A8-PHP/</id>
    <published>2020-08-17T03:32:39.216Z</published>
    <updated>2020-08-17T03:32:39.216Z</updated>
    
    <content type="html"><![CDATA[<h4 id="安装sdk"><a href="#安装sdk" class="headerlink" title="安装sdk"></a>安装sdk</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">composer require alibabacloud&#x2F;client</span><br></pre></td></tr></table></figure><h4 id="封装方法"><a href="#封装方法" class="headerlink" title="封装方法"></a>封装方法</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sendphone</span><span class="params">($code,$phone)</span></span>&#123;</span><br><span class="line">        AlibabaCloud::accessKeyClient(<span class="string">'AccessKeyId'</span>, <span class="string">'AccessKeySecret'</span>)-&gt;regionId(<span class="string">'cn-hangzhou'</span>)-&gt;asDefaultClient();</span><br><span class="line">        $result = AlibabaCloud::rpc()</span><br><span class="line">            -&gt;product(<span class="string">'Dysmsapi'</span>)</span><br><span class="line">            -&gt;version(<span class="string">'2017-05-25'</span>)</span><br><span class="line">            -&gt;action(<span class="string">'SendSms'</span>)</span><br><span class="line">            -&gt;method(<span class="string">'POST'</span>)</span><br><span class="line">            -&gt;host(<span class="string">'dysmsapi.aliyuncs.com'</span>)</span><br><span class="line">            -&gt;options([</span><br><span class="line">                <span class="string">'query'</span> =&gt; [</span><br><span class="line">                    <span class="string">'PhoneNumbers'</span> =&gt; $phone,</span><br><span class="line">                    <span class="string">'SignName'</span> =&gt; <span class="string">"签名"</span>,</span><br><span class="line">                    <span class="string">'TemplateCode'</span> =&gt; <span class="string">"模板id"</span>,</span><br><span class="line">                    <span class="string">'TemplateParam'</span>=&gt;<span class="string">'&#123;"code":"'</span>.$code.<span class="string">'"&#125;'</span></span><br><span class="line">                ],</span><br><span class="line">            ])</span><br><span class="line">            -&gt;request();</span><br><span class="line">        <span class="keyword">return</span> $result;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="其他帮助"><a href="#其他帮助" class="headerlink" title="其他帮助"></a>其他帮助</h4><p><a href="https://help.aliyun.com/document_detail/55359.html?spm=a2c4g.11186623.4.5.553a4e6aUAAElB" target="_blank" rel="noopener">官方SDK_DEMO</a></p><p><a href="https://api.aliyun.com/new?spm=a2c4g.11186623.2.13.667619d9f8wHAh#/?product=Dysmsapi&version=2017-05-25&api=SendSms&params={}&tab=DEMO&lang=PHP" target="_blank" rel="noopener">官方调试工具</a></p><p>本文更新，切正常使用时间 2020-1-1</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;安装sdk&quot;&gt;&lt;a href=&quot;#安装sdk&quot; class=&quot;headerlink&quot; title=&quot;安装sdk&quot;&gt;&lt;/a&gt;安装sdk&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;
      
    
    </summary>
    
    
      <category term="编程开发" scheme="https://xibaachao.github.io/categories/%E7%BC%96%E7%A8%8B%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="PHP" scheme="https://xibaachao.github.io/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>读《爱，就注定了一生的漂泊》</title>
    <link href="https://xibaachao.github.io/2020/08/17/%E8%AF%BB%E3%80%8A%E7%88%B1%EF%BC%8C%E5%B0%B1%E6%B3%A8%E5%AE%9A%E4%BA%86%E4%B8%80%E7%94%9F%E7%9A%84%E6%BC%82%E6%B3%8A%E3%80%8B/"/>
    <id>https://xibaachao.github.io/2020/08/17/%E8%AF%BB%E3%80%8A%E7%88%B1%EF%BC%8C%E5%B0%B1%E6%B3%A8%E5%AE%9A%E4%BA%86%E4%B8%80%E7%94%9F%E7%9A%84%E6%BC%82%E6%B3%8A%E3%80%8B/</id>
    <published>2020-08-17T03:32:39.215Z</published>
    <updated>2020-08-17T03:32:39.215Z</updated>
    
    <content type="html"><![CDATA[<h4 id="爱，就注定了一生的漂泊（刘墉）"><a href="#爱，就注定了一生的漂泊（刘墉）" class="headerlink" title="爱，就注定了一生的漂泊（刘墉）"></a>爱，就注定了一生的漂泊（刘墉）</h4><p>怎么来说呢！这个书的语言描述非常的爽，让人看后，觉得很爽。</p><p>这个书对人物，对事物，对风景，甚至是对石头，都在描写爱，对人，对人的周边，这些能读懂，但是后面的对风景，对一些死物，我就有点看不懂了，也是跳过看的。</p><p>让我对爱，有一些新的认识，但是我描述不出来，算是读着特别爽的那种！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;爱，就注定了一生的漂泊（刘墉）&quot;&gt;&lt;a href=&quot;#爱，就注定了一生的漂泊（刘墉）&quot; class=&quot;headerlink&quot; title=&quot;爱，就注定了一生的漂泊（刘墉）&quot;&gt;&lt;/a&gt;爱，就注定了一生的漂泊（刘墉）&lt;/h4&gt;&lt;p&gt;怎么来说呢！这个书的语言描述非常的爽
      
    
    </summary>
    
    
      <category term="随笔" scheme="https://xibaachao.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="读后感" scheme="https://xibaachao.github.io/tags/%E8%AF%BB%E5%90%8E%E6%84%9F/"/>
    
  </entry>
  
  <entry>
    <title>推荐使用vscode插件</title>
    <link href="https://xibaachao.github.io/2020/08/17/%E6%8E%A8%E8%8D%90%E4%BD%BF%E7%94%A8vscode%E6%8F%92%E4%BB%B6/"/>
    <id>https://xibaachao.github.io/2020/08/17/%E6%8E%A8%E8%8D%90%E4%BD%BF%E7%94%A8vscode%E6%8F%92%E4%BB%B6/</id>
    <published>2020-08-17T03:32:39.214Z</published>
    <updated>2020-08-17T03:32:39.214Z</updated>
    
    <content type="html"><![CDATA[<h4 id="php开发"><a href="#php开发" class="headerlink" title="php开发"></a>php开发</h4><ul><li>PHP Intelephense</li><li>PHP IntelliSense</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;php开发&quot;&gt;&lt;a href=&quot;#php开发&quot; class=&quot;headerlink&quot; title=&quot;php开发&quot;&gt;&lt;/a&gt;php开发&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;PHP Intelephense&lt;/li&gt;
&lt;li&gt;PHP IntelliSense&lt;/li&gt;
&lt;/ul
      
    
    </summary>
    
    
      <category term="随笔" scheme="https://xibaachao.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="其他" scheme="https://xibaachao.github.io/tags/%E5%85%B6%E4%BB%96/"/>
    
  </entry>
  
  <entry>
    <title>微信小程序跳转</title>
    <link href="https://xibaachao.github.io/2020/08/17/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E8%B7%B3%E8%BD%AC/"/>
    <id>https://xibaachao.github.io/2020/08/17/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E8%B7%B3%E8%BD%AC/</id>
    <published>2020-08-17T03:32:39.214Z</published>
    <updated>2020-08-17T03:32:39.214Z</updated>
    
    <content type="html"><![CDATA[<p>微信小程序点击事件注册 传参等操作</p><p>微信小程序 页面跳转.<code>wx.navigateTo(OBJECT)</code>；.<code>wx.redirectTo(OBJECT)</code>；<code>wx.switchTab(OBJECT)</code>；<code>wx.navigateBack(OBJECT)</code></p><a id="more"></a><h3 id="wx-navigateTo"><a href="#wx-navigateTo" class="headerlink" title="wx.navigateTo"></a>wx.navigateTo</h3><p>跳转后可以返回前面的页面</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wx.navigateTo(&#123;</span><br><span class="line">  url: <span class="string">'xxx'</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="wx-redirectTo"><a href="#wx-redirectTo" class="headerlink" title="wx.redirectTo"></a>wx.redirectTo</h4><p>跳转后关闭前面的页面</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wx.redirectTo(&#123;</span><br><span class="line">  url: <span class="string">'xxx'</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="wx-switchTab"><a href="#wx-switchTab" class="headerlink" title="wx.switchTab"></a>wx.switchTab</h4><p>跳转tabBar 页面</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wx.switchTab(&#123;</span><br><span class="line"> url: <span class="string">'xxx'</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="wx-navigateBack"><a href="#wx-navigateBack" class="headerlink" title="wx.navigateBack"></a>wx.navigateBack</h4><p>返回页面</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">wx.navigateBack(&#123;</span><br><span class="line">  delta: <span class="number">2</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//后退2个页面</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;微信小程序点击事件注册 传参等操作&lt;/p&gt;
&lt;p&gt;微信小程序 页面跳转.&lt;code&gt;wx.navigateTo(OBJECT)&lt;/code&gt;；.&lt;code&gt;wx.redirectTo(OBJECT)&lt;/code&gt;；&lt;code&gt;wx.switchTab(OBJECT)&lt;/code&gt;；&lt;code&gt;wx.navigateBack(OBJECT)&lt;/code&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="编程开发" scheme="https://xibaachao.github.io/categories/%E7%BC%96%E7%A8%8B%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="微信小程序开发" scheme="https://xibaachao.github.io/tags/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>查看docker容器错误</title>
    <link href="https://xibaachao.github.io/2020/08/17/%E6%9F%A5%E7%9C%8Bdocker%E5%AE%B9%E5%99%A8%E9%94%99%E8%AF%AF/"/>
    <id>https://xibaachao.github.io/2020/08/17/%E6%9F%A5%E7%9C%8Bdocker%E5%AE%B9%E5%99%A8%E9%94%99%E8%AF%AF/</id>
    <published>2020-08-17T03:32:39.214Z</published>
    <updated>2020-08-17T03:32:39.215Z</updated>
    
    <content type="html"><![CDATA[<h4 id="docker-查看容器错误"><a href="#docker-查看容器错误" class="headerlink" title="docker 查看容器错误"></a>docker 查看容器错误</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker logs -f -t --tail 10 容器名称 //查看容器最后10条的日志记录</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;docker-查看容器错误&quot;&gt;&lt;a href=&quot;#docker-查看容器错误&quot; class=&quot;headerlink&quot; title=&quot;docker 查看容器错误&quot;&gt;&lt;/a&gt;docker 查看容器错误&lt;/h4&gt;&lt;figure class=&quot;highlight bash
      
    
    </summary>
    
    
      <category term="编程开发" scheme="https://xibaachao.github.io/categories/%E7%BC%96%E7%A8%8B%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="服务器" scheme="https://xibaachao.github.io/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>普通项目webpack配置</title>
    <link href="https://xibaachao.github.io/2020/08/17/%E6%99%AE%E9%80%9A%E9%A1%B9%E7%9B%AEwebpack%E9%85%8D%E7%BD%AE/"/>
    <id>https://xibaachao.github.io/2020/08/17/%E6%99%AE%E9%80%9A%E9%A1%B9%E7%9B%AEwebpack%E9%85%8D%E7%BD%AE/</id>
    <published>2020-08-17T03:32:39.214Z</published>
    <updated>2020-08-17T03:32:39.214Z</updated>
    
    <content type="html"><![CDATA[<h4 id="个人使用webpack-配置"><a href="#个人使用webpack-配置" class="headerlink" title="个人使用webpack 配置"></a>个人使用webpack 配置</h4><ul><li>webpack 4.0</li><li>npm</li><li>主要是单页的开发，和小项目页面开发。主要是打包js</li></ul><h4 id="package-json"><a href="#package-json" class="headerlink" title="package.json"></a>package.json</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"name"</span>: <span class="string">"test"</span>,</span><br><span class="line">  <span class="string">"version"</span>: <span class="string">"1.0.0"</span>,</span><br><span class="line">  <span class="string">"main"</span>: <span class="string">"index.js"</span>,</span><br><span class="line">  <span class="string">"license"</span>: <span class="string">"MIT"</span>,</span><br><span class="line">  <span class="string">"dependencies"</span>: &#123;</span><br><span class="line">    <span class="string">"compass-mixins"</span>: <span class="string">"^0.12.10"</span>,</span><br><span class="line">    <span class="string">"css-loader"</span>: <span class="string">"^3.4.2"</span>,</span><br><span class="line">    <span class="string">"file-loader"</span>: <span class="string">"^5.0.2"</span>,</span><br><span class="line">    <span class="string">"html-webpack-plugin"</span>: <span class="string">"^3.2.0"</span>,</span><br><span class="line">    <span class="string">"mini-css-extract-plugin"</span>: <span class="string">"^0.9.0"</span>,</span><br><span class="line">    <span class="string">"node-sass"</span>: <span class="string">"^4.13.1"</span>,</span><br><span class="line">    <span class="string">"postcss-loader"</span>: <span class="string">"^3.0.0"</span>,</span><br><span class="line">    <span class="string">"sass-loader"</span>: <span class="string">"^8.0.2"</span>,</span><br><span class="line">    <span class="string">"ts-loader"</span>: <span class="string">"^6.2.1"</span>,</span><br><span class="line">    <span class="string">"typescript"</span>: <span class="string">"^3.7.5"</span>,</span><br><span class="line">    <span class="string">"url-loader"</span>: <span class="string">"^3.0.0"</span>,</span><br><span class="line">    <span class="string">"webpack"</span>: <span class="string">"^4.41.5"</span>,</span><br><span class="line">    <span class="string">"webpack-cli"</span>: <span class="string">"^3.3.10"</span>,</span><br><span class="line">    <span class="string">"webpack-dev-server"</span>: <span class="string">"^3.10.1"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"scripts"</span>: &#123;</span><br><span class="line">    <span class="string">"start"</span>: <span class="string">"webpack-dev-server"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="webpack-config-js"><a href="#webpack-config-js" class="headerlink" title="webpack.config.js"></a>webpack.config.js</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">const</span> MiniCssExtractPlugin = <span class="built_in">require</span>(<span class="string">'mini-css-extract-plugin'</span>);</span><br><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>);</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    entry: &#123;</span><br><span class="line">        <span class="string">"index"</span>: <span class="string">"./src/js/index.ts"</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    output: &#123;</span><br><span class="line">        path: path.resolve(__dirname, <span class="string">'dist'</span>),</span><br><span class="line">        filename: <span class="string">"./js/[name].js"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    plugins: [</span><br><span class="line">        <span class="keyword">new</span> MiniCssExtractPlugin(&#123;</span><br><span class="line">            filename: <span class="string">'./css/[name].css'</span>,</span><br><span class="line">        &#125;),</span><br><span class="line">        <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">            filename: <span class="string">"index.html"</span>,</span><br><span class="line">            template: <span class="string">"./src/index.html"</span>,</span><br><span class="line">            chunks: [<span class="string">"index"</span>]</span><br><span class="line">        &#125;),</span><br><span class="line"></span><br><span class="line">    ],</span><br><span class="line">    <span class="built_in">module</span>: &#123;</span><br><span class="line">        rules: [&#123;</span><br><span class="line">                test: <span class="regexp">/\.scss$/</span>,</span><br><span class="line">                use: [&#123;</span><br><span class="line">                        loader: MiniCssExtractPlugin.loader,</span><br><span class="line">                        options: &#123;</span><br><span class="line">                            publicPath: <span class="string">'../'</span>,</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;,</span><br><span class="line">                    &#123;</span><br><span class="line">                        loader: <span class="string">'css-loader'</span>,</span><br><span class="line"></span><br><span class="line">                    &#125;,</span><br><span class="line">                    <span class="string">'sass-loader'</span>,</span><br><span class="line">                ],</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="regexp">/\.(png|svg|jpg|gif)$/</span>,</span><br><span class="line">                use: [&#123;</span><br><span class="line">                    loader: <span class="string">'url-loader'</span>, <span class="comment">//是指定使用的loader和loader的配置参数</span></span><br><span class="line">                    options: &#123;</span><br><span class="line">                        limit: <span class="number">500</span>, <span class="comment">//是把小于500B的文件打成Base64的格式，写入JS</span></span><br><span class="line">                        name: <span class="string">'./imgs/[name].[ext]'</span>,</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;]</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="regexp">/\.tsx?$/</span>,</span><br><span class="line">                use: <span class="string">'ts-loader'</span>,</span><br><span class="line">                exclude: <span class="regexp">/node_modules/</span>,</span><br><span class="line">            &#125;,</span><br><span class="line">        ],</span><br><span class="line">    &#125;,</span><br><span class="line">    resolve: &#123;</span><br><span class="line">        extensions: [<span class="string">'.tsx'</span>, <span class="string">'.ts'</span>, <span class="string">'.js'</span>],</span><br><span class="line">    &#125;,</span><br><span class="line">    mode: <span class="string">"production"</span>,</span><br><span class="line">    devServer: &#123;</span><br><span class="line">        contentBase: path.join(__dirname, <span class="string">'dist'</span>),</span><br><span class="line">        compress: <span class="literal">true</span>,</span><br><span class="line">        port: <span class="number">9000</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="tsconfig-json"><a href="#tsconfig-json" class="headerlink" title="tsconfig.json"></a>tsconfig.json</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"compilerOptions"</span>: &#123;</span><br><span class="line">    <span class="string">"outDir"</span>: <span class="string">"./dist/"</span>,</span><br><span class="line">    <span class="string">"noImplicitAny"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">"module"</span>: <span class="string">"es6"</span>,</span><br><span class="line">    <span class="string">"target"</span>: <span class="string">"es5"</span>,</span><br><span class="line">    <span class="string">"jsx"</span>: <span class="string">"react"</span>,</span><br><span class="line">    <span class="string">"allowJs"</span>: <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;个人使用webpack-配置&quot;&gt;&lt;a href=&quot;#个人使用webpack-配置&quot; class=&quot;headerlink&quot; title=&quot;个人使用webpack 配置&quot;&gt;&lt;/a&gt;个人使用webpack 配置&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;webpack 4.0&lt;/li&gt;
      
    
    </summary>
    
    
      <category term="编程开发" scheme="https://xibaachao.github.io/categories/%E7%BC%96%E7%A8%8B%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="前端开发" scheme="https://xibaachao.github.io/tags/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>前端代码热更新</title>
    <link href="https://xibaachao.github.io/2020/08/17/%E5%89%8D%E7%AB%AF%E4%BB%A3%E7%A0%81%E7%83%AD%E6%9B%B4%E6%96%B0/"/>
    <id>https://xibaachao.github.io/2020/08/17/%E5%89%8D%E7%AB%AF%E4%BB%A3%E7%A0%81%E7%83%AD%E6%9B%B4%E6%96%B0/</id>
    <published>2020-08-17T03:32:39.213Z</published>
    <updated>2020-08-17T03:32:39.213Z</updated>
    
    <content type="html"><![CDATA[<h4 id="前端代码热更新"><a href="#前端代码热更新" class="headerlink" title="前端代码热更新"></a>前端代码热更新</h4><ul><li>安装环境</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn global add live-server</span><br></pre></td></tr></table></figure><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><blockquote><p>进入站点目录</p><p>在终端命令下输入live-server</p></blockquote><h4 id="修改端口"><a href="#修改端口" class="headerlink" title="修改端口"></a>修改端口</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">live-server --port=80</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;前端代码热更新&quot;&gt;&lt;a href=&quot;#前端代码热更新&quot; class=&quot;headerlink&quot; title=&quot;前端代码热更新&quot;&gt;&lt;/a&gt;前端代码热更新&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;安装环境&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight jav
      
    
    </summary>
    
    
      <category term="编程开发" scheme="https://xibaachao.github.io/categories/%E7%BC%96%E7%A8%8B%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="前端开发" scheme="https://xibaachao.github.io/tags/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
</feed>
